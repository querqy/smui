# (1) Startup parameter (env) section
# Goal: Bootstrap SMUI for local demonstration purposes.
# ~~~~~

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`

# org.postgresql.Driver can also be used
db.default.driver=com.mysql.cj.jdbc.Driver
db.default.driver=${?SMUI_DB_JDBC_DRIVER}

db.default.url="jdbc:mysql://localhost/smui?autoReconnect=true&useSSL=false"
db.default.url=${?SMUI_DB_URL}

db.default.username="smui"
db.default.username=${?SMUI_DB_USER}

db.default.password="smui"
db.default.password=${?SMUI_DB_PASSWORD}

# (2) smui.conf (custom) section
# ~~~~~
# As of v3.15 using configuration parameters in this section via environment variables is deprecated.
# Future (major) versions of SMUI will only allow configuration of these settings via an explicit config file (e.g. smui.conf).
# Also see: https://docs.querqy.org/smui/config.html

# smui2solr script config
# WARNING: better not use spaces or tabs on path or host config as that might confuse order of script params passed to shell
smui2solr.SRC_TMP_FILE="/tmp/search-management-ui_rules-txt.tmp"
smui2solr.SRC_TMP_FILE=${?SMUI_2SOLR_SRC_TMP_FILE}

# Application Feature Toggles
# ~~~~~
toggle.activate-spelling=false
toggle.activate-spelling=${?SMUI_TOGGLE_SPELLING}

toggle.ui-concept.updown-rules.combined=true
toggle.ui-concept.updown-rules.combined=${?SMUI_TOGGLE_UI_UPDOWN_COMBINED}

toggle.ui-concept.all-rules.with-solr-fields=true
toggle.ui-concept.all-rules.with-solr-fields=${?SMUI_TOGGLE_UI_WITH_SOLR_FIELDS}

toggle.ui-list.limit-items-to=-1 # set -1 for no limitation for displayed items in list
toggle.ui-list.limit-items-to=${?SMUI_TOGGLE_UI_LIMIT_LIST_ITEMS_TO}

# For rule deployment to a Git repo
smui.deployment.git.repo-url="ssh://git@localhost/git-server/repos/smui_rulestxt_repo.git"
smui.deployment.git.repo-url=${?SMUI_DEPLOYMENT_GIT_REPO_URL}
smui2solr.deployment.git.filename.common-rules-txt="rules.txt"
smui2solr.deployment.git.filename.common-rules-txt=${?SMUI_DEPLOYMENT_GIT_FN_COMMON_RULES_TXT}

# whether the special Git repo export should happen during rule deployment
toggle.rule-deployment.git.enable=false
toggle.rule-deployment.git.enable=${?SMUI_DEPLOYMENT_GIT_ENABLE}

# whether the SMUI generated input id should be exported as part of the rules.txt
toggle.rule-deployment.log-rule-id=false
toggle.rule-deployment.log-rule-id=${?SMUI_TOGGLE_RULE_ID_LOGGING}

toggle.rule-deployment.split-decompound-rules-txt=false
toggle.rule-deployment.split-decompound-rules-txt=${?SMUI_TOGGLE_DEPL_SPLIT_DECOMPOUND}

smui2solr.replace-rules-tmp-file="/tmp/search-management-ui_replace-rules-txt.tmp"
smui2solr.replace-rules-tmp-file=${?SMUI_2SOLR_REPLACE_RULES_TMP_FILE}

toggle.rule-deployment.pre-live.present=false
toggle.rule-deployment.pre-live.present=${?SMUI_TOGGLE_DEPL_PRELIVE}
# in case pre-live is present, describe PRELIVE deployment
smui2solr.deploy-prelive-solr-host=""
smui2solr.deploy-prelive-solr-host=${?SMUI_DEPLOY_PRELIVE_SOLR_HOST}

toggle.rule-deployment.custom-script=false
toggle.rule-deployment.custom-script=${?SMUI_TOGGLE_DEPL_CUSTOM_SCRIPT}
toggle.rule-deployment.custom-script-SMUI2SOLR-SH_PATH="/PATH/TO/alternative-smui2solr-script.sh"
toggle.rule-deployment.custom-script-SMUI2SOLR-SH_PATH=${?SMUI_TOGGLE_DEPL_CUSTOM_SCRIPT_PATH}

toggle.headline="Search Management UI"
toggle.headline=${?SMUI_HEADLINE}

toggle.rule-deployment-label="LIVE"
toggle.rule-deployment-label=${?SMUI_TOGGLE_DEPL_NAME}

toggle.deploy-prelive-fn-label="PRELIVE"
toggle.deploy-prelive-fn-label=${?SMUI_TOGGLE_PRELIVE_NAME}

toggle.rule-tagging=false
toggle.rule-tagging=${?SMUI_RULE_TAGGING_ACTIVE}

# A file in JSON format with predefined tags can be defined here, see TestPredefinedTags.json as a example
toggle.predefined-tags-file=""
toggle.predefined-tags-file=${?SMUI_PREDEFINED_TAGS_FILE}

# Pass JSON (as string) containing the mappings OR leave null for defaults
# TODO consider to pass a (JSON) config file (containing this as well as predefined-tags-file - see above)
toggle.ui-concept.custom.up-down-dropdown-mappings=null
toggle.ui-concept.custom.up-down-dropdown-mappings=${?SMUI_CUSTOM_UPDOWN_MAPPINGS}

# application instance specific: Play Filter / Security configuration
# ~~~~~
play.http.secret.key="dummy application secret with some higher entropy"
play.http.secret.key=${?SMUI_PLAY_APPLICATION_SECRET}


# WARNING: A simple display-user is deprecated as of v3.14. See https://github.com/querqy/smui/pull/83#issuecomment-1023284550 (27-01-2022).
toggle.display-username.default="Anonymous Search Manager"
toggle.display-username.default=${?SMUI_DEFAULT_USERNAME}

# 5K data for json_payload might be to less for some rules maintained (see /smui/conf/evolutions/default/6.sql) - maybe support only Postgres >= version, that has native JSON support?

toggle.activate-eventhistory=false
toggle.activate-eventhistory=${?SMUI_TOGGLE_EVENTHISTORY}

# NOTE: If a custom configuration is not valid, SMUI will default the preview to "None" (effectively deactivating it). You will receive a console WARN.
smui.target-environment.config="""{}"""

# Application Server configuration
# ~~~~~
useSSL=false

# Caching configuration for SPA Assets (/assets/app/)
play.assets.cache."/public/app/"="no-cache"

# Play evolutions
# ~~~~~
play.evolutions.useLocks=true
play.evolutions.autoApply=true

# Play startup bindings
# ~~~~~
# @see https://stackoverflow.com/questions/4907603/where-do-i-put-startup-code-in-play-framework
play.modules.enabled += "SmuiStartModule"

# Play Filter / Security configuration
# ~~~~~
play.filters.disabled += play.filters.csrf.CSRFFilter // TODO Configure security filters correctly before production use.
play.filters.disabled += play.filters.hosts.AllowedHostsFilter
play.filters.headers.contentSecurityPolicy = null // TODO specify or remove --- play.filters.headers.contentSecurityPolicy =

# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 9

play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

smui.rule-usage-statistics {
  # Set a file:// or gs:// URL to a CSV file to load rule usage statistics for the rule usage report
  location = ${?SMUI_RULE_USAGE_STATISTICS_LOCATION}
}

# Enable security module/filter
play.modules.enabled += "modules.SecurityModule"
play.http.filters = "filters.Filters"

# Restrict Play session cookie's maxAge to 1 day
play.http.session.maxAge = 1 day
play.http.session.maxAge = ${?SMUI_SESSION_MAXAGE}

# This defines the pac4j client to use for authentication. Uses the well-defined pac4j names (OidcClient,
# DirectBasicAuthClient...), currently supported:
# - DirectBasicAuthClient
# - SAML2Client
# If no or empty value is set, no authentication is used.
smui.auth.client = ""
smui.auth.client = ${?SMUI_AUTH_CLIENT}

# The absolute URL SMUI is reachable on for callbacks
# (e.g. POSTs from external identity providers, such as in SAML authentication)
smui.auth.baseUrl = "https://localhost:2080"
smui.auth.baseUrl = ${?SMUI_AUTH_BASEURL}

# The SAML-specific configuration which is used *only* when the SAML2Client is configured as smui.auth.client
smui.auth.clients.SAML2Client {
    # the keystore file to encrypt communication with the IdP with, if the resource configured here does not exist
    # a new keystore will be created
    keystore = "resource:samlKeystore.jks"
    keystore = ${?SMUI_SAML_KEYSTORE}

    # password of the keystore file
    keystorePassword = "realPassword"
    keystorePassword = ${?SMUI_SAML_KEYSTORE_PASSWORD}

    # password of the private key within the keystore
    privateKeyPassword = "realPassword"
    privateKeyPassword = ${?SMUI_SAML_PRIVATE_KEY_PASSWORD}

    # the path to metadata of the identity provider
    identityProviderMetadataPath = "resource:azure-ad-saml.xml"
    identityProviderMetadataPath = ${?SMUI_SAML_IDENTITY_PROVIDER_METADATA_PATH}

    # the ID configured at the identity provider for this service
    serviceProviderEntityId = "urn:mace:saml:search-management-ui"
    serviceProviderEntityId = ${?SMUI_SAML_SERVICE_PROVIDER_ENTITY_ID}

    # the path where we store the generated service-provider metadata XML temporarily
    serviceProviderMetadataPath = "/tmp/sp-metadata.xml"
    serviceProviderMetadataPath = ${?SMUI_SAML_SERVICE_PROVIDER_METADATA_PATH}

    # This defines the maximum age in seconds of an authentication at the IdP that is still accepted by SMUI.
    # We accept any successful IdP authentication. If you set this to some positive value an old authentication
    # at the IdP is rejected and will result in a (currently unhandled) "Authentication issue instant is too old
    # or in the future" exception
    maximumAuthenticationLifetime = -1
    maximumAuthenticationLifetime = ${?SMUI_SAML_MAXIMUM_AUTHENTICATION_LIFETIME}
}

# The DirectBasicAuthClient configuration which is used *only* when the DirectBasicAuthClient is configured as smui.auth.client
smui.auth.clients.ConfiguredDirectBasicAuthClient {
    username = "smui_user"
    username = ${?SMUI_BASIC_AUTH_USER}
    password = "smui_pass"
    password = ${?SMUI_BASIC_AUTH_PASS}
}

# pac4j rules for configuring the pac4j SecurityFilter
pac4j.security.rules = [
  {"/" = {
    authorizers = "isAuthenticated"
    clients = ${?smui.auth.client}
  }}
  # Rules for the REST services. These don't specify a client and will return 401 when not authenticated.
  {"/api/.*" = {
    authorizers = "isAuthenticated"
  }}
]