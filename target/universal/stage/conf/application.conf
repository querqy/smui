# <OVERWRITE_ME>
# ~~~~~

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`

# org.postgresql.Driver can also be used
db.default.driver=com.mysql.cj.jdbc.Driver
db.default.driver=${?SMUI_DB_JDBC_DRIVER}

db.default.url="jdbc:mysql://localhost/smui?autoReconnect=true&useSSL=false"
db.default.url=${?SMUI_DB_URL}

db.default.username="smui"
db.default.username=${?SMUI_DB_USER}

db.default.password="smui"
db.default.password=${?SMUI_DB_PASSWORD}

# smui2solr script config
# WARNING: better not use spaces or tabs on path or host config as that might confuse order of script params passed to shell
smui2solr.SRC_TMP_FILE="/tmp/search-management-ui_rules-txt.tmp"
smui2solr.SRC_TMP_FILE=${?SMUI_2SOLR_SRC_TMP_FILE}

smui2solr.DST_CP_FILE_TO="/usr/bin/solr/liveCore/conf/rules.txt"
smui2solr.DST_CP_FILE_TO=${?SMUI_2SOLR_DST_CP_FILE_TO}

smui2solr.SOLR_HOST="localhost:8983"
smui2solr.SOLR_HOST=${?SMUI_2SOLR_SOLR_HOST}

smui.deployment.git.repo-url="ssh://git@localhost/git-server/repos/smui_rulestxt_repo.git"
smui.deployment.git.repo-url=${?SMUI_DEPLOYMENT_GIT_REPO_URL}
smui2solr.deployment.git.filename.common-rules-txt="rules.txt"
smui2solr.deployment.git.filename.common-rules-txt=${?SMUI_DEPLOYMENT_GIT_FN_COMMON_RULES_TXT}

# Application Feature Toggles
# ~~~~~
toggle.activate-spelling=false
toggle.activate-spelling=${?SMUI_TOGGLE_SPELLING}

toggle.ui-concept.updown-rules.combined=true
toggle.ui-concept.updown-rules.combined=${?SMUI_TOGGLE_UI_UPDOWN_COMBINED}

toggle.ui-concept.all-rules.with-solr-fields=true
toggle.ui-concept.all-rules.with-solr-fields=${?SMUI_TOGGLE_UI_WITH_SOLR_FIELDS}

toggle.ui-list.limit-items-to=-1 # set -1 for no limitation for displayed items in list
toggle.ui-list.limit-items-to=${?SMUI_TOGGLE_UI_LIMIT_LIST_ITEMS_TO}

toggle.rule-deployment.log-rule-id=false
toggle.rule-deployment.log-rule-id=${?SMUI_TOGGLE_RULE_ID_LOGGING}

toggle.rule-deployment.split-decompound-rules-txt=false
toggle.rule-deployment.split-decompound-rules-txt=${?SMUI_TOGGLE_DEPL_SPLIT_DECOMPOUND}
toggle.rule-deployment.split-decompound-rules-txt-DST_CP_FILE_TO="/usr/bin/solr/liveCore/conf/decompound-rules.txt"
toggle.rule-deployment.split-decompound-rules-txt-DST_CP_FILE_TO=${?SMUI_TOGGLE_DEPL_DECOMPOUND_DST}

smui2solr.replace-rules-tmp-file="/tmp/search-management-ui_replace-rules-txt.tmp"
smui2solr.replace-rules-tmp-file=${?SMUI_2SOLR_REPLACE_RULES_TMP_FILE}
smui2solr.replace-rules-dst-cp-file-to="/usr/bin/solr/liveCore/conf/replace-rules.txt"
smui2solr.replace-rules-dst-cp-file-to=${?SMUI_2SOLR_REPLACE_RULES_DST_CP_FILE_TO}

toggle.rule-deployment.pre-live.present=false
toggle.rule-deployment.pre-live.present=${?SMUI_TOGGLE_DEPL_PRELIVE}
# in case pre-live is present, describe PRELIVE deployment
smui2solr.deploy-prelive-fn-rules-txt="/usr/bin/solr/preliveCore/conf/rules.txt"
smui2solr.deploy-prelive-fn-rules-txt=${?SMUI_DEPLOY_PRELIVE_FN_RULES_TXT}
smui2solr.deploy-prelive-solr-host=""
smui2solr.deploy-prelive-solr-host=${?SMUI_DEPLOY_PRELIVE_SOLR_HOST}
smui2solr.deploy-prelive-fn-decompound-txt="/usr/bin/solr/preliveCore/conf/rules-decompound.txt"
smui2solr.deploy-prelive-fn-decompound-txt=${?SMUI_DEPLOY_PRELIVE_FN_DECOMPOUND_TXT}
smui2solr.deploy-prelive-fn-replace-txt="/usr/bin/solr/preliveCore/conf/replace-rules.txt"
smui2solr.deploy-prelive-fn-replace-txt=${?SMUI_DEPLOY_PRELIVE_FN_REPLACE_TXT}

toggle.rule-deployment.custom-script=false
toggle.rule-deployment.custom-script=${?SMUI_TOGGLE_DEPL_CUSTOM_SCRIPT}
toggle.rule-deployment.custom-script-SMUI2SOLR-SH_PATH="/PATH/TO/alternative-smui2solr-script.sh"
toggle.rule-deployment.custom-script-SMUI2SOLR-SH_PATH=${?SMUI_TOGGLE_DEPL_CUSTOM_SCRIPT_PATH}

toggle.headline="Search Management UI"
toggle.headline=${?SMUI_HEADLINE}

toggle.rule-tagging=false
toggle.rule-tagging=${?SMUI_RULE_TAGGING_ACTIVE}

# A file in JSON format with predefined tags can be defined here, see TestPredefinedTags.json as a example
toggle.predefined-tags-file=""
toggle.predefined-tags-file=${?SMUI_PREDEFINED_TAGS_FILE}

# Pass JSON (as string) containing the mappings OR leave null for defaults
# TODO consider to pass a (JSON) config file (containing this as well as predefined-tags-file - see above)
toggle.ui-concept.custom.up-down-dropdown-mappings=null
toggle.ui-concept.custom.up-down-dropdown-mappings=${?SMUI_CUSTOM_UPDOWN_MAPPINGS}

# application instance specific: Play Filter / Security configuration
# ~~~~~
play.http.secret.key="generated application secret"
play.http.secret.key=${?SMUI_PLAY_APPLICATION_SECRET}

# Authentication (technical application behaviour)
# ~~~~~

# For Basic Auth authentication, use SMUI's BasicAuthAuthenticatedAction (like in the example below):
# smui.authAction="controllers.auth.BasicAuthAuthenticatedAction"
# WARNING: BasicAuth is deprecated as of v3.14. See https://github.com/querqy/smui/pull/83#issuecomment-1023284550 (27-01-2022).
smui.BasicAuthAuthenticatedAction.user="smui_user"
smui.BasicAuthAuthenticatedAction.user=${?SMUI_BASIC_AUTH_USER}
smui.BasicAuthAuthenticatedAction.pass="smui_pass"
smui.BasicAuthAuthenticatedAction.pass=${?SMUI_BASIC_AUTH_PASS}

# For JWT authentication, use SMUI's JWTJsonAuthenticatedAction (like in the example below):
# smui.authAction="controllers.auth.JWTJsonAuthenticatedAction"
smui.JWTJsonAuthenticatedAction.login.url=""
smui.JWTJsonAuthenticatedAction.login.url=${?SMUI_JWT_LOGIN_URL}
smui.JWTJsonAuthenticatedAction.cookie.name="jwt"
smui.JWTJsonAuthenticatedAction.cookie.name=${?SMUI_JWT_AUTH_COOKIE_NAME}
smui.JWTJsonAuthenticatedAction.public.key=""
smui.JWTJsonAuthenticatedAction.public.key=${?SMUI_JWT_PUBLIC_KEY}
smui.JWTJsonAuthenticatedAction.algorithm="rsa"
smui.JWTJsonAuthenticatedAction.algorithm=${?SMUI_JWT_ALGORITHMS}

smui.JWTJsonAuthenticatedAction.authorization.active="false"
smui.JWTJsonAuthenticatedAction.authorization.active=${?SMUI_JWT_ACTIVE}
smui.JWTJsonAuthenticatedAction.authorization.json.path="$.roles"
smui.JWTJsonAuthenticatedAction.authorization.json.path=${?SMUI_JWT_ROLES_JSON_PATH}
smui.JWTJsonAuthenticatedAction.authorization.roles="admin"
smui.JWTJsonAuthenticatedAction.authorization.roles=${?SMUI_JWT_AUTHORIZED_ROLE}

# For using no authentication, leave smui.authAction configured to scala.None
smui.authAction="scala.None"
smui.authAction=${?SMUI_AUTH_ACTION}

smui.auth.ui-concept.simple-logout-button-target-url=""
smui.auth.ui-concept.simple-logout-button-target-url=${?SMUI_AUTH_LOGOUT_BTN_URL}

# Remember: You can implement your own authentication behaviour (e.g. based on LDAP / JWTs) by supplying your own AuthenticatedAction (see README.md)

# WARNING: A simple display-user is deprecated as of v3.14. See https://github.com/querqy/smui/pull/83#issuecomment-1023284550 (27-01-2022).
toggle.display-username.default="Anonymous Search Manager"
toggle.display-username.default=${?SMUI_DEFAULT_USERNAME}

# 5K data for json_payload might be to less for some rules maintained (see /smui/conf/evolutions/default/6.sql) - maybe support only Postgres >= version, that has native JSON support?

toggle.activate-eventhistory=false
toggle.activate-eventhistory=${?SMUI_TOGGLE_EVENTHISTORY}

# </OVERWRITE_ME>
# ~~~~~

# Application Server configuration
# ~~~~~
useSSL=false

# Caching configuration for SPA Assets (/assets/app/)
play.assets.cache."/public/app/"="no-cache"

# Play evolutions
# ~~~~~
play.evolutions.useLocks=true
play.evolutions.autoApply=true

# Play startup bindings
# ~~~~~
# @see https://stackoverflow.com/questions/4907603/where-do-i-put-startup-code-in-play-framework
play.modules.enabled += "SmuiStartModule"

# Play Filter / Security configuration
# ~~~~~
play.filters.disabled += play.filters.csrf.CSRFFilter // TODO Configure security filters correctly before production use.
play.filters.disabled += play.filters.hosts.AllowedHostsFilter
play.filters.headers.contentSecurityPolicy = null // TODO specify or remove --- play.filters.headers.contentSecurityPolicy =

# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 9

play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}
